# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

option(
    "--with-ios-sdk",
    env="IOS_SDK_DIR",
    nargs=1,
    help="Location of Platform SDK to use",
)


@imports("plistlib")
def get_ios_sdk_version(sdk):
    with open(os.path.join(sdk, "SDKSettings.plist"), "rb") as plist:
        obj = plistlib.load(plist)
    if not obj:
        raise Exception(
            "Error parsing SDKSettings.plist in the SDK directory: %s" % sdk
        )
    if "Version" not in obj:
        raise Exception(
            "Error finding Version information in SDKSettings.plist from the SDK: %s"
            % sdk
        )
    return Version(obj["Version"])


@depends("--with-ios-sdk", host)
@imports(_from="os.path", _import="isdir")
@imports(_from="os", _import="listdir")
def ios_sdk(sdk, host):
    if sdk:
        sdk = sdk[0]
    elif host.os == "OSX":
        sdk = check_cmd_output(
            "xcrun", "--sdk", "iphoneos", "--show-sdk-path", onerror=lambda: ""
        ).rstrip()
        if not sdk:
            die("")

        sdk_dir = os.path.dirname(sdk)
        version = []
        for d in listdir(sdk_dir):
            if d.lower().startswith("iphoneos"):
                try:
                    sdk = os.path.join(sdk_dir, d)
                except Exception:
                    pass
    else:
        die("Need a iOS SDK when targeting macOS. Please use --with-ios-sdk to give the path to a iOS SDK.")

    if not isdir(sdk):
        die("SDK not found in %s" % sdk)

    return sdk;


set_config("IOS_SDK_DIR", ios_sdk)


option(
    "--enable-ios-target",
    nargs=1,
    default="15.0",
    help="Set the minimum iOS version",
)


@depends_if("--enable-ios-target")
def ios_target(value):
    return value[0]
